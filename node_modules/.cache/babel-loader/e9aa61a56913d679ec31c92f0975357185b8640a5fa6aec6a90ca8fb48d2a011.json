{"ast":null,"code":"var _jsxFileName = \"C:\\\\Xavier\\\\karbox - Copy\\\\iot\\\\src\\\\Pages\\\\otp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function OTPInput() {\n  _s();\n  const [otpDigits, setOtpDigits] = useState(Array(5).fill(\"\"));\n\n  // Handle input changes\n  const handleChange = (index, event) => {\n    const digits = [...otpDigits];\n    digits[index] = event.target.value;\n    setOtpDigits(digits);\n\n    // Auto-focus the next input if possible\n    if (index < 4 && event.target.value !== \"\") {\n      const nextInput = document.querySelector(`#otp-digit-${index + 1}`);\n      if (nextInput) {\n        nextInput.focus();\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: otpDigits.map((digit, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: `otp-digit-${index + 1}`,\n      value: digit,\n      maxLength: \"1\",\n      onChange: e => handleChange(index, e),\n      style: {\n        width: \"40px\",\n        marginRight: \"10px\"\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(OTPInput, \"fqWuh4Ax7J6RLb6ASMqDP3WZ0hI=\");\n_c = OTPInput;\nvar _c;\n$RefreshReg$(_c, \"OTPInput\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","OTPInput","_s","otpDigits","setOtpDigits","Array","fill","handleChange","index","event","digits","target","value","nextInput","document","querySelector","focus","children","map","digit","type","id","maxLength","onChange","e","style","width","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Xavier/karbox - Copy/iot/src/Pages/otp.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function OTPInput() {\r\n  const [otpDigits, setOtpDigits] = useState(Array(5).fill(\"\"));\r\n\r\n  // Handle input changes\r\n  const handleChange = (index, event) => {\r\n    const digits = [...otpDigits];\r\n    digits[index] = event.target.value;\r\n    setOtpDigits(digits);\r\n\r\n    // Auto-focus the next input if possible\r\n    if (index < 4 && event.target.value !== \"\") {\r\n      const nextInput = document.querySelector(`#otp-digit-${index + 1}`);\r\n      if (nextInput) {\r\n        nextInput.focus();\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      {otpDigits.map((digit, index) => (\r\n        <input\r\n          key={index}\r\n          type=\"text\"\r\n          id={`otp-digit-${index + 1}`}\r\n          value={digit}\r\n          maxLength=\"1\"\r\n          onChange={(e) => handleChange(index, e)}\r\n          style={{ width: \"40px\", marginRight: \"10px\" }}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAACO,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;;EAE7D;EACA,MAAMC,YAAY,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IACrC,MAAMC,MAAM,GAAG,CAAC,GAAGP,SAAS,CAAC;IAC7BO,MAAM,CAACF,KAAK,CAAC,GAAGC,KAAK,CAACE,MAAM,CAACC,KAAK;IAClCR,YAAY,CAACM,MAAM,CAAC;;IAEpB;IACA,IAAIF,KAAK,GAAG,CAAC,IAAIC,KAAK,CAACE,MAAM,CAACC,KAAK,KAAK,EAAE,EAAE;MAC1C,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAE,cAAaP,KAAK,GAAG,CAAE,EAAC,CAAC;MACnE,IAAIK,SAAS,EAAE;QACbA,SAAS,CAACG,KAAK,EAAE;MACnB;IACF;EACF,CAAC;EACD,oBACEhB,OAAA;IAAAiB,QAAA,EACGd,SAAS,CAACe,GAAG,CAAC,CAACC,KAAK,EAAEX,KAAK,kBAC1BR,OAAA;MAEEoB,IAAI,EAAC,MAAM;MACXC,EAAE,EAAG,aAAYb,KAAK,GAAG,CAAE,EAAE;MAC7BI,KAAK,EAAEO,KAAM;MACbG,SAAS,EAAC,GAAG;MACbC,QAAQ,EAAGC,CAAC,IAAKjB,YAAY,CAACC,KAAK,EAAEgB,CAAC,CAAE;MACxCC,KAAK,EAAE;QAAEC,KAAK,EAAE,MAAM;QAAEC,WAAW,EAAE;MAAO;IAAE,GANzCnB,KAAK;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAQb;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV;AAAC7B,EAAA,CAhCuBD,QAAQ;AAAA+B,EAAA,GAAR/B,QAAQ;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}